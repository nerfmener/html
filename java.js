
const minUnits =3, maxUnits=9;

let unitsCount = getRandomInt(minUnits, maxUnits);
let signs = new Array(unitsCount -1).fill(null); // null - –ø—É—Å—Ç–æ, '+', '-'
let currentPlayer = 'player'; // 'player' –∏–ª–∏ 'computer'
const gameDiv = document.getElementById('game');
const infoDiv = document.getElementById('info');
const restartBtn = document.getElementById('restartBtn');

function getRandomInt(min,max){
 return Math.floor(Math.random()*(max-min+1))+min;
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
function render(){
 gameDiv.innerHTML = '';
 for(let i=0;i<unitsCount;i++){
   // –ï–¥–∏–Ω–∏—Ü–∞
   const unitSpan = document.createElement('span');
   unitSpan.className='unit';
   unitSpan.textContent='1';
   gameDiv.appendChild(unitSpan);
   
   // –ï—Å–ª–∏ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –µ–¥–∏–Ω–∏—Ü–∞ - —Ä–∏—Å—É–µ–º –∑–Ω–∞–∫
   if(i < unitsCount -1){
     const signSpan = document.createElement('span');
     signSpan.className='sign';
     
     if(signs[i] === null){
       signSpan.classList.add('empty');
       signSpan.textContent='?';
       if(currentPlayer === 'player'){
         signSpan.style.cursor = 'pointer';
         signSpan.title = '–ö–ª–∏–∫–Ω–∏—Ç–µ —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∑–Ω–∞–∫ (+ –∏–ª–∏ -)';
         signSpan.addEventListener('click', () => playerChooseSign(i));
       } else {
         signSpan.style.cursor = 'default';
         signSpan.title = '';
       }
     } else {
       signSpan.textContent=signs[i];
       if(currentPlayer === 'computer' && signs[i] !== null){
         signSpan.classList.add('computer');
       } else {
         signSpan.classList.remove('computer');
       }
       signSpan.style.cursor='default';
       signSpan.title='';
     }
     
     gameDiv.appendChild(signSpan);
   }
 }
}

// –•–æ–¥ –∏–≥—Ä–æ–∫–∞ - –≤—ã–±–æ—Ä –∑–Ω–∞–∫–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ i
function playerChooseSign(i){
 if(currentPlayer !== 'player') return;

 // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å + –∏–ª–∏ -
 const choice = prompt("–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ " + (i+1) + " (–≤–≤–µ–¥–∏—Ç–µ + –∏–ª–∏ -):", "+");
 if(choice !== '+' && choice !== '-'){
   alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ '+' –∏–ª–∏ '-'");
   return;
 }

 signs[i] = choice;

 currentPlayer='computer';
 infoDiv.textContent='–•–æ–¥ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞...';

 render();

setTimeout(computerTurn,500);
}

// –•–æ–¥ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ - –≤—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –ø—É—Å—Ç–æ–π –∑–Ω–∞–∫ –∏ —Å—Ç–∞–≤–∏—Ç + –∏–ª–∏ -
function computerTurn(){
 // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø—É—Å—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
 const emptyIndices = [];
 for(let i=0;i<signs.length;i++){
   if(signs[i] === null) emptyIndices.push(i);
 }

 if(emptyIndices.length ===0){
   finishGame();
   return;
 }

 // –ö–æ–º–ø—å—é—Ç–µ—Ä –≤—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∏–∑ –ø—É—Å—Ç—ã—Ö
 const chosenIndex = emptyIndices[getRandomInt(0, emptyIndices.length -1)];

 // –ö–æ–º–ø—å—é—Ç–µ—Ä –≤—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –∑–Ω–∞–∫
 const compSign = Math.random() <0.5 ? '+' : '-';

 signs[chosenIndex] = compSign;

 infoDiv.textContent=`–ö–æ–º–ø—å—é—Ç–µ—Ä –ø–æ—Å—Ç–∞–≤–∏–ª '${compSign}' –Ω–∞ –ø–æ–∑–∏—Ü–∏—é ${chosenIndex+1}. –í–∞—à —Ö–æ–¥. –í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫.`;

 currentPlayer='player';

 render();

 checkIfGameOver();
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ª–∏ –∏–≥—Ä–∞ (–≤—Å–µ –∑–Ω–∞–∫–∏ —Ä–∞—Å—Å—Ç–∞–≤–ª–µ–Ω—ã)
function checkIfGameOver(){
 if(signs.every(s => s !== null)){
   finishGame();
 }
}

// –í—ã—á–∏—Å–ª—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –≤–∏–¥–∞:
// –Ω–∞–ø—Ä–∏–º–µ—Ä –¥–ª—è –µ–¥–∏–Ω–∏—Ü –∏ –∑–Ω–∞–∫–æ–≤:
// "1 + 1 - 1 + ..."
// –≤—ã—á–∏—Å–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ

function calculateResult(){
 let result=1;

 for(let i=0;i<signs.length;i++){
   let nextUnit=1;

   if(signs[i]==='+'){
     result += nextUnit;
   } else if(signs[i]==='-'){
     result -= nextUnit;
   } else {
     // –ï—Å–ª–∏ –≤–¥—Ä—É–≥ –µ—Å—Ç—å –ø—É—Å—Ç–æ–π –∑–Ω–∞–∫ (–Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å)
     throw new Error("–ù–µ –≤—Å–µ –∑–Ω–∞–∫–∏ —Ä–∞—Å—Å—Ç–∞–≤–ª–µ–Ω—ã!");
   }
 }

 return result;
}

function finishGame(){
 const res=calculateResult();
 let msg=`–ò—Ç–æ–≥–æ–≤–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ:\n`;

 for(let i=0;i<unitsCount;i++){
   msg += '1 ';
   
   if(i < signs.length){
     msg += signs[i] + ' ';
   }
 }

 msg += `\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ä–∞–≤–µ–Ω ${res}.\n`;

 if(res %2 ===0){
   msg += "–ß–∏—Å–ª–æ —á—ë—Ç–Ω–æ–µ ‚Äî –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ üòû";
 } else {
   msg += "–ß–∏—Å–ª–æ –Ω–µ—á—ë—Ç–Ω–æ–µ ‚Äî –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ üéâ";
 }

 infoDiv.textContent=msg.replace(/\n/g,'\n');

 currentPlayer=null;

 restartBtn.style.display='inline-block';
}

restartBtn.addEventListener('click', () => {
 unitsCount=getRandomInt(minUnits,maxUnits);
 signs=new Array(unitsCount-1).fill(null);
 currentPlayer='player';
 infoDiv.textContent='–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ –º–µ–∂–¥—É –µ–¥–∏–Ω–∏—Ü–∞–º–∏. –í—ã —Ö–æ–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–º.';
 restartBtn.style.display='none';
 render();
});

render();
