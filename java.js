const minUnits = 3, maxUnits = 15;

// –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
function getRandomInt(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏
let units = [];
let unitsCount = getRandomInt(minUnits, maxUnits);
for (let i=0; i<unitsCount; i++){
  units.push(getRandomInt(1, 15)); // –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –ª—é–±–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è —á–∏—Å–µ–ª
}

let signs = new Array(unitsCount - 1).fill(null); // –∑–Ω–∞–∫–∏ –º–µ–∂–¥—É —á–∏—Å–ª–∞–º–∏
let currentPlayer = 'player'; // 'player' –∏–ª–∏ 'computer'
const gameDiv = document.getElementById('game');
const infoDiv = document.getElementById('info');
const restartBtn = document.getElementById('restartBtn');

function getRandomInt(min, max) {
  return Math.floor(Math.random()*(max-min+1))+min;
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
function render() {
  gameDiv.innerHTML = '';
  for(let i=0;i<unitsCount;i++){
    // –ß–∏—Å–ª–æ
    const unitSpan = document.createElement('span');
    unitSpan.className='unit';
    unitSpan.textContent=units[i];
    gameDiv.appendChild(unitSpan);
    
    // –ï—Å–ª–∏ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –µ–¥–∏–Ω–∏—Ü–∞ - —Ä–∏—Å—É–µ–º –∑–Ω–∞–∫
    if(i < unitsCount -1){
      const signSpan = document.createElement('span');
      signSpan.className='sign';
      
      if(signs[i] === null){
        signSpan.classList.add('empty');
        signSpan.textContent='?';
        if(currentPlayer === 'player'){
          signSpan.style.cursor = 'pointer';
          signSpan.title = '–ö–ª–∏–∫–Ω–∏—Ç–µ —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∑–Ω–∞–∫ (+ , - –∏–ª–∏ *)';
          signSpan.addEventListener('click', () => playerChooseSign(i));
        } else {
          signSpan.style.cursor = 'default';
          signSpan.title = '';
        }
      } else {
        signSpan.textContent=signs[i];
        if(currentPlayer === 'computer' && signs[i] !== null){
          signSpan.classList.add('computer');
        } else {
          signSpan.classList.remove('computer');
        }
        signSpan.style.cursor='default';
        signSpan.title='';
      }
      
      gameDiv.appendChild(signSpan);
    }
  }
}

// –•–æ–¥ –∏–≥—Ä–æ–∫–∞
function playerChooseSign(i){
 if(currentPlayer !== 'player') return;

 const choice = prompt("–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ " + (i+1) + " (–≤–≤–µ–¥–∏—Ç–µ + , - –∏–ª–∏ *):", "+");
 if(choice !== '+' && choice !== '-' && choice !== '*'){
   alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ '+', '-' –∏–ª–∏ *");
   return;
 }

 signs[i] = choice;

 currentPlayer='computer';
 infoDiv.textContent='–•–æ–¥ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞...';

 render();

 setTimeout(computerTurn,500);
}

// –•–æ–¥ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
function computerTurn(){
 const emptyIndices = [];
 for(let i=0;i<signs.length;i++){
   if(signs[i] === null) emptyIndices.push(i);
 }

 if(emptyIndices.length ===0){
   finishGame();
   return;
 }

 const chosenIndex = emptyIndices[getRandomInt(0, emptyIndices.length -1)];
 const compSign = Math.random() <0.5 ?  '+' : '-';

 signs[chosenIndex] = compSign;

 infoDiv.textContent=`–ö–æ–º–ø—å—é—Ç–µ—Ä –ø–æ—Å—Ç–∞–≤–∏–ª '${compSign}' –Ω–∞ –ø–æ–∑–∏—Ü–∏—é ${chosenIndex+1}. –í–∞—à —Ö–æ–¥. –í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫.`;

 currentPlayer='player';

 render();

 checkIfGameOver();
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
function checkIfGameOver(){
 if(signs.every(s => s !== null)){
   finishGame();
 }
}

// –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
function calculateResult() {
  let result = units[0];

  for(let i=0; i<signs.length; i++){
    if(signs[i] === '+'){
      result += units[i+1];
    } else if(signs[i] === '-'){
      result -= units[i+1];}
      else if(signs[i] === '*'){
        result *= units[i+1];
    } else {
      throw new Error("–ù–µ –≤—Å–µ –∑–Ω–∞–∫–∏ —Ä–∞—Å—Å—Ç–∞–≤–ª–µ–Ω—ã!");
    }
  }
  return result;
}

function finishGame() {
 const res=calculateResult();
 let msg='';

 // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –≤—ã—Ä–∞–∂–µ–Ω–∏—è
 for(let i=0;i<unitsCount;i++){
   msg += units[i] + ' ';
   if(i < signs.length){
     msg += signs[i] + ' ';
   }
 }

 msg += `\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ä–∞–≤–µ–Ω ${res}.\n`;

 if(res %2 ===0){
   msg += "–ß–∏—Å–ª–æ —á—ë—Ç–Ω–æ–µ ‚Äî –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ üòû";
 } else {
   msg += "–ß–∏—Å–ª–æ –Ω–µ—á—ë—Ç–Ω–æ–µ ‚Äî –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ üéâ";
 }

 infoDiv.textContent=msg.replace(/\n/g,'\n');

 currentPlayer=null;
 restartBtn.style.display='inline-block';
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
restartBtn.addEventListener('click', () => {
 unitsCount=getRandomInt(minUnits,maxUnits);
 units = [];
 for(let i=0; i<unitsCount; i++){
   units.push(getRandomInt(1,15));
 }
 signs=new Array(unitsCount-1).fill(null);
 currentPlayer='player';
 infoDiv.textContent='–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ –º–µ–∂–¥—É —á–∏—Å–ª–∞–º–∏.';
 restartBtn.style.display='none';
 render();
});

render();

